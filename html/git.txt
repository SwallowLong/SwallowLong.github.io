任务一: 看有没有下载git，用命令行传文件上github 廖雪峰(5~175）
任务二: 整理IFE前期的东西合成一个page
任务三: bootstrap画主页（175~）
任务四: markdown






mkdir
cd
pwd
git init
git add 
git commit -m ""
git status
git diff
git log
git reflog
git reset --hard commit-id/HEAD
git checkout --
git reset HEAD 
rm
git rm
ssh-keygen -t rsa -C email@ .com
git branch
git checkout -b 
git branch name
git checkout
git merge 
git branch -d 
git push -u origin master
git push origin 
gir push origin tagname 
git pull
git tag name 
git tag 
git show
git tag -a tagname -m "" commit-id
git tag -d
git push origin :refs/tags/tagname
git stash
git stash pop（可以在不同的分支上取出来）
git branch --set-upstream branch-name origin/branch-name
git config --global alias.lg log







创建分支：git branch name
切换分支：git checkout name
创建+切换；git checkout -b name
创建并切换后，分支是基于现有的master即是工作区和暂存区后
合并某分支到当前分支：git merge name
删除分支；git branch -d name
查看分支；git branch



创建远程库的时候发的疯：
	1、MLGB的id_rsa.pub,找了github_rsa.pub结果就是已经使用，fuck
	解决方法：ssh-keygen -t rsa -C 1679187550@qq.com利用此语句生成ssh搞TM
	2、git push -u origin master时，和原本github中的冲突，fuck
	解决方法：将两边先同步，主要是git remote add origin 的时候草TM不知道什
			  么鬼，真的是，最后我TM也不换地址了，就TM丢在C盘不动了，草
	总结下就是：ssh-keygen -t rsa -C 1679187550@qq.com
                github创建repository，接着git remote add origin ssh那一长串（是你创建的repository中的）
                git push -u origin master 第一次
                git push origin master 同步，也可以叫推送，可能看起来更直白点




git config --global user.name “Your Name”
git config --global use.email "email@qq.com"
用来填写你的email和name

mkdir name
cd name
pwd
mkdir用来创建项目名，即是说这是个根目录，cd是用来表示进入某个目录下，当你进入的文件夹名有空格时要使用“”将文件名包裹，
否则失败，pwd是用来查看位置

git init
git add file
git commit -m "..."
git init用来生成一个git仓库，add添加文件到仓库，add添加时TMD一定要有这个文件，你TM没有还在这问老
子怎么加不出来，老子要喷火了，你吃屎都没用，commit提交到仓库，-m则是对你这次提交的申明，那么add
和commit的主要区别是什么呢？add是将创建的文件加入到暂存区，而commit则是将暂存区中的文件全部都提
交到仓库，即提交到master的分支上，所以，commit并不是一次只能提交一次，而是可以提交很多，就是git
commit 能提交的只有已经进入到暂存区里面的文件，而在工作区的则无法提交

git status
git diff files
git status 查看有哪些要提交却没提交的修改，掌握你工作区的状态，git diff files查看要修改文件具体改变了那些地方，查看没
问题后即可git add files，然后git status即可查看修改是否包括了files，git commit -m即可

cat files
查看文件内容

git log
git reflog
git reset --hard commit-id/HEAD
git log查看生成的版本，方便回到过去的版本（可以在git log后使用--pretty=oneline来将版本排列为一行）
git reflog查看使用过的命令行，想回到倒回前的版本，因为倒回后，现版本就log不到
就只能使用reflog查看用过的命令行，然后通过commit号来确认装B
git reset --hard commit-id 回到相应的版本，和前面的-m（用来确认你是要这个版本号）联合装B，完美倒流，还可以使用HEAD^会到上版本，HEAD^^回到上两个
版本，当然还有HEAD~n回到n版本前，readme.txt的内容就改变了

git checkout -- file
git reset HEAD file
当你的文件还在工作区并没有add到暂存区时，你可以通过git checkout -- file来丢弃工作区的更改，当你已经add到暂存区了的话，则先git reset HEAD file将TM
拉回工作区，在通过git checkout -- file 将TMD丢弃，当然既然我能将人踹走，那必定也能将人请回来，因为git checkout -- file是回到该file最近一次修改的状
态，如果你已经git commit了，那就git log/git reflog然后git reset --hard HEAD^/commit-id，爸爸带你拯救
世界 59bf97e  093a1af

rm file
git rm file
rm删除工作区，git rm 删除了commit了，没办法救世，除非rm但没git rm则可以通过git checkout -- flie拯救世界，--后的空格很重要

ssh-keygen -t rsa -C 1679187550@qq.com
生成id_rsa.pub

git merge 和git branch -d 配合装B，一个合并，一个合并完删
git push origin master使用时，当你的file还在工作区时是无法在github的官网显示出你的修改的

git log --graph --pretty=oneline显示解决版本冲突后的合并图

分支冲突时，直接改file加入暂存区然后加入加入master即可然后推送到远程库

推送的是你本地合并后的master而不是你本地没合并的其他分支

git merge --no-ff -m "merge with no-ff" name,合并branch时，使用--no-ff强制不使用，则会生成一个版本，即在合并后你仍然能看到
你被合并的分支形成的版本，因为要形成版本，所以要加入-m，相当说使用Fast forward则是直接没线2个版本，而--no-ff则是会在2个版本
中间加一个合并分支的版本，而不是合并后直接去除这个版本的痕迹

git stash
git stash pop
git stash 创建的分支是基于master，也即是第三区，若你在分支上修改了内容，但现在需要另一个修改，两者时间冲突，只能重新创建一个
分支，但分支若没add和commit则会直接作用在工作区，而master和分支是共用一个工作区，则可能给你的master带来麻烦，即将还没完成的
branch可能add和commit到master上，而git stash则可以避免这个问题，将此分支单独存放一会，而工作区则是干净的，可以放心创建新的
branch，而git stash pop则是在解决完bug后，重新手头的工作，则使用git stash pop将存起来的branch调出来，并删除在其暂存位置的stash
内容，当然你也可以先git stash apply恢复，然后在使用git stash drop来删除，不过明显git stash pop 更简单

放弃一个没完成的分支git branch -D name

git push origin branch-name
git pull
git checkout -b branch-name origin/branch-name抓取github上的某分支到本地
git branch --set-upstream branch-name origin/branch-name
git push origin branch-name推送，一次OK那好，没OK，报冲突，怎么破，git pull抓取下来，失败则git branch --set-upstream branch-name origin/branch-name,
然后在推送OK团队协作差不多就是这样的

git tag v1
git tag -a v1 -m "" commit_num
git tag
git show tagname
git tag v1，添加v1名的标签至最新的commit，git tag -a v1 -m "" commit_num,将版本号为commit_num的添加v1标签，标签说明-m "",git tag看有什么标签，git show tagname查看标签内容

git push origin tagname
git push origin tags
git tag -d tagname
git push origin :refs/tags/tagname
推送标签，删除标签，删除远程库标签则要先删除本地，在push远程，：refs/tags/tagname中的tags是固定模式不可去

git config --global alias.name '原命令'
自己偷懒神器



Bootstrap
我觉得就像是一个替换库，里面写好了各种css样式，你只要出现了html标签，则开始套用标签，使你不至于浪费太多时间
基本框架
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Bootstrap 101 Template</title>

    <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <!--你自己的样式文件 -->
    <link href="css/your-style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
	<!-- 以下两个插件用于在IE8以及以下版本浏览器支持HTML5元素和媒体查询，如果不需要用可以移除 -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- 如果要使用Bootstrap的js插件，必须先调入jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
	<!-- 包括所有bootstrap的js插件或者可以根据需要使用的js插件调用　-->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

  </body>
</html>
标题
h1 和.h1表现出的样式是一样的，即h1,.h1 {....}
副标题
h1 small,.h1 small
强调
.lead

.text-muted：提示，使用浅灰色（#999）
.text-primary：主要，使用蓝色（#428bca）
.text-success：成功，使用浅绿色(#3c763d)
.text-info：通知信息，使用浅蓝色（#31708f）
.text-warning：警告，使用黄色（#8a6d3b）
.text-danger：危险，使用褐色（#a94442）
.text-left：左对齐
.text-center：居中对齐
.text-right：右对齐
.text-justify：两端对齐

.list-unstyled
.list-inline
<dl>添加类名“.dl-horizontal”给定义列表实现水平显示效果

用于显示代码的风格。在Bootstrap主要提供了三种代码风格：
1、使用<code></code>来显示单行内联代码
2、使用<pre></pre>来显示多行块代码
3、使用<kbd></kbd>来显示用户输入代码
.pre-scrollable出现滚动条

.table：基础表格
.table table-striped：斑马线表格
.table table-bordered：带边框的表格
.table table-hover：鼠标悬停高亮的表格
.table table-condensed：紧凑型表格
.table table-responsive：响应式表格

为了让控件在各种表单风格中样式不出错，需要添加类名“form-control”

主要借助“.checkbox”和“.radio”样式，来处理复选框、单选按钮与标签的对齐方式
1、如果checkbox需要水平排列，只需要在label标签上添加类名“checkbox-inline”
2、如果radio需要水平排列，只需要在label标签上添加类名“radio-inline
如果表单使用了类名“form-horizontal”，其中“form-group”就相当于网格系统中的“row”
disabled禁用，据说对于整个禁用的域中，如果legend中有输入框的话，这个输入框是无法被禁用的
1、.has-warning:警告状态（黄色）
2、.has-error：错误状态（红色）
3、.has-success：成功状态（绿色）
4、.has-feedback: 自动添加对应小图
label自动换行